"""
Django settings for mystepik project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

load_dotenv()

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Основные настройки Yandex Cloud S3
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')  # IAM-ключ
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')  # IAM-секрет
AWS_S3_ENDPOINT_URL = 'https://storage.yandexcloud.net'
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_SIGNATURE_VERSION = 's3v4'

# Публичный бакет (для статики/медиа)
AWS_STORAGE_BUCKET_NAME = 'vits'  # Имя публичного бакета
AWS_DEFAULT_ACL = 'public-read'  # Файлы доступны без авторизации
AWS_QUERYSTRING_AUTH = False  # Не требовать подписи URL

# Приватный бакет (для документов)
PRIVATE_AWS_STORAGE_BUCKET_NAME = os.getenv('PRIVATE_AWS_STORAGE_BUCKET_NAME')  # Имя приватного бакета
PRIVATE_AWS_DEFAULT_ACL = 'private'  # Доступ только по подписи
PRIVATE_AWS_QUERYSTRING_AUTH = True  # Генерировать подписанные URL

# Пути для загрузки файлов
PUBLIC_MEDIA_LOCATION = 'media'  # Папка в публичном бакете
PRIVATE_MEDIA_LOCATION = 'protected'  # Папка в приватном бакете

# VK OAuth 2.1https://www.pythonanywhere.com/user/Tamik327/files/home/Tamik327/back-vits/server/settings
VK_CLIENT_ID = os.getenv('VK_CLIENT_ID')
VK_CLIENT_SECRET = os.getenv('VK_CLIENT_SECRET')
VK_REDIRECT_URI = os.getenv('VK_REDIRECT_URI')
VK_API_VERSION = '5.199'
VK_AUTH_URL = "https://id.vk.com/authorize"
VK_TOKEN_URL = "https://id.vk.com/oauth2/auth"  # Ключевое изменение!
VK_SCOPE = 'email,phone'  # Только необходимые scope
FRONT_VK_CALLBACK = os.getenv('FRONT_VK_CALLBACK')

EXOLVE_SENDER_NAME = os.getenv('EXOLVE_SENDER_NAME')
EXOLVE_API_KEY = os.getenv('EXOLVE_API_KEY')
EXOLVE_SMPP_LOGIN = os.getenv('EXOLVE_SMPP_LOGIN')
EXOLVE_SMPP_PASSWORD = os.getenv('EXOLVE_SMPP_PASSWORD')
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []

# Настройки SMS.RU
SMSRU_API_KEY = ''  # Например, '12345678-ABCD-4321-5678-9876543210'
SMSRU_SENDER = ''  # Имя отправителя (должно быть заранее зарегистрировано в sms.ru)
SMSRU_API_ID = ''
SMS_SENDER_NAME = ''

# Настройки для Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',  # Схема для автоматической генерации API-документации
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'EXCEPTION_HANDLER': 'server.apps.news.exceptions.custom_exception_handler',
    'DEFAULT_CACHE_TIMEOUT': 60 * 15,  # 15 минут
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'API Documentation',
    'DESCRIPTION': 'API for vits project',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# Включить кеширование? True = да, False = нет
CACHE_ENABLED = True  # или False, если не нужно кеширование

# Настройки Redis (работают только если CACHE_ENABLED = True)
if CACHE_ENABLED:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://localhost:6379/1",  # или "redis://redis:6379/1" если в Docker-сети
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            },
            "KEY_PREFIX": "myapp_cache",
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

# Использовать http-only куки для JWT (False для dev, True для production)
USE_JWT_COOKIES = True

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,  # Важно для безопасности
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    # Cookie settings
    'AUTH_COOKIE': 'refresh_token',  # Cookie name for refresh token
    'AUTH_COOKIE_DOMAIN': 'tamik.surge.sh',      # Set to your domain in production
    'AUTH_COOKIE_HTTP_ONLY': True,   # Prevent JavaScript access
    'AUTH_COOKIE_PATH': '/',         # Cookie path
    'AUTH_COOKIE_SECURE': True,
    'AUTH_COOKIE_SAMESITE': 'None',  # Обязательно для кросс-доменных запросов
}

# Настройки для drf-spectacular
SPECTACULAR_SETTINGS = {
    'TITLE': 'User Management API',                               # Название API
    'DESCRIPTION': 'API для регистрации, получения и удаления пользователей.',  # Описание API
    'VERSION': '1.0.0',                                           # Версия API
    'SERVE_INCLUDE_SCHEMA': False,                                # Отключение схемы в ответах API
}

DEBUG_SOCKETS = False  # Флаг для включения/выключения WebSockets

if DEBUG_SOCKETS:
    ASGI_APPLICATION = 'server.asgi.application'
    
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [('127.0.0.1', 6379)],
            },
        },
    }

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Настройки микросервиса групп
GROUP_SERVICE_URL = 'http://127.0.0.1:8000'  # или ваш URL
SERVICE_AUTH_TOKEN = 'dev-internal-token'  # Общий для всех внутренних сервисов

INSTALLED_APPS = [
    'rest_framework_simplejwt.token_blacklist',
    'django.db.backends.postgresql',
    'server.apps.Application',
    'server.apps.Content',
    'debug_toolbar',
    'phonenumber_field',
    'django_filters',
    'server.apps.proftesting',
    'server.apps.perscalendar',
    'server.apps.directions',
    'server.apps.news',
    'channels',
    'corsheaders',
    'server.apps.virtmuseum',
    'rest_framework',
    'drf_spectacular',
    'rest_framework_simplejwt',
    'server.apps.users',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

PHONENUMBER_DEFAULT_REGION = 'RU'

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ---------------------------------

CORS_ALLOW_ORIGINS = [
    "https://tamik.surge.sh",
    "http://localhost:5173",
    "http://127.0.0.1:5173"
]

ALLOWED_HOSTS = ['*']

# Разрешаем cookies и авторизацию
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_ALL_ORIGINS = True

# Разрешаем все методы (GET, POST, PUT и т.д.)
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# ---------------------------------

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'server.wsgi.application'

AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # 'server.apps.users.backends.EmailBackend',
    # 'server.apps.users.backends.PhoneBackend',  # Аутентификация по телефону
]

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'vitsdb',
#         'USER': 'vitsuser',
#         'PASSWORD': '123321Ts_@',
#         'HOST': '46.149.67.175',
#         'PORT': '5432',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = '/root/back-vits/staticfiles'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",  # Теперь Redis в Docker!
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         },
#         "KEY_PREFIX": "events_service"
#     }
# }

# Время жизни кеша по умолчанию (в секундах)
CACHE_TTL = 60 * 0.1  # 1 минут

INTERNAL_IPS = ['127.0.0.1']

DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: True,  # Принудительно показывать панель
}